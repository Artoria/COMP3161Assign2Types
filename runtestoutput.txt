Running test: zz_more_tests/complex_exprs/010.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (App (Prim Eq) (Var "x")) (Num 0)) (Num 0) (App (Var "f") (App (App (Prim Sub) (Var "x")) (Num 1)))))

Stdout was:

Running test: zz_more_tests/complex_exprs/ifTest2.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: zz_more_tests/advanced_polymorphic/003.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (Con "True") (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (Var "x")))] (Var "h")) (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Add) (Var "x")) (Num 1))))] (Var "h"))))

Stdout was:

Running test: zz_more_tests/advanced_polymorphic/001.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (App (Prim Gt) (Var "x")) (Num 1)) (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (Var "x")))] (Var "h")) (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (Var "x")))] (Var "h"))))

Stdout was:

Running test: zz_more_tests/advanced_polymorphic/004.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Con "Pair") (Letfun (Bind "h" Nothing ["z"] (Var "x")))) (App (App (Prim Add) (Var "x")) (Num 1))))

Stdout was:

Running test: zz_more_tests/advanced_polymorphic/012.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Con "Pair") (Let [Bind "m" Nothing [] (Letfun (Bind "h" Nothing ["m"] (Let [Bind "z" Nothing [] (Var "x")] (Var "x"))))] (Var "m"))) (App (App (Prim Add) (Var "x")) (Num 1))))

Stdout was:

Running test: zz_more_tests/polymorphic/ifTest3.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: zz_more_tests/polymorphic/009.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Case (App (Prim Snd) (Var "x")) [Alt "Inl" ["y"] (App (Prim Fst) (Var "x")),Alt "Inr" ["z"] (Var "z")]))

Stdout was:

Running test: zz_more_tests/polymorphic/005.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Var "x"))

Stdout was:

Running test: zz_more_tests/polymorphic/011.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (Prim Fst) (Var "x")) (App (Prim Snd) (Var "x")) (App (Var "f") (App (App (Con "Pair") (Con "True")) (Num 10)))))

Stdout was:

Running test: zz_more_tests/polymorphic/008.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (Prim Fst) (Var "x")) (App (Prim Fst) (Var "x")) (App (Prim Snd) (Var "x"))))

Stdout was:

Running test: zz_more_tests/polymorphic/006.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Case (Var "x") [Alt "Inl" ["z"] (Var "z"),Alt "Inr" ["k"] (Var "k")]))

Stdout was:

Running test: zz_more_tests/basic_exprs/ifTest1.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/ConTest2.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:156:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: zz_more_tests/basic_exprs/ConTest3.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:156:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: zz_more_tests/basic_exprs/InlTest1.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: zz_more_tests/basic_exprs/PrimOpTest.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/ConTest1.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/intTest.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/9_examples/4.mhs (worth 8) :-  Stdout Check Passed!
Running test: main_tests/9_examples/5.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["z"] (Var "z"))

Stdout was:

Running test: main_tests/9_examples/0.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/9_examples/1.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/9_examples/3.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Case (App (Con "Inl") (Num 1)) [Alt "Inl" ["x"] (App (App (Prim Add) (Var "x")) (Num 1)),Alt "Inr" ["y"] (Var "y")]

Stdout was:

Running test: main_tests/9_examples/2.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/9_examples/6.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Var "x"))

Stdout was:

Running test: main_tests/4_ifthenelse/003.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/001.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/004.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/005.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/002.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/006.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/007.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/000.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/0_basics/main/main.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/ints/003.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/ints/001.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/ints/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/bools/001.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/bools/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/003.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/004.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/009.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/005.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/002.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/010.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/011.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/014.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/008.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/006.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/007.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/dividebyzero/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/1_primops/unarynegate/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/8_sums/2_case/002.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Case (App (Con "Inl") (App (App (Con "Pair") (Con "True")) (Num 7))) [Alt "Inl" ["x"] (App (Con "Inr") (Var "x")),Alt "Inr" ["y"] (App (Con "Inl") (Var "y"))]

Stdout was:

Running test: main_tests/8_sums/2_case/000.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Case (App (Con "Inl") (App (App (Con "Pair") (Num 1)) (Con "True"))) [Alt "Inl" ["x"] (Var "x"),Alt "Inr" ["y"] (Var "y")]

Stdout was:

Running test: main_tests/8_sums/0_left/0.mhs (worth 2) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/8_sums/0_left/1.mhs (worth 2) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/8_sums/1_right/003.mhs (worth 2) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/8_sums/1_right/001.mhs (worth 2) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/8_sums/1_right/002.mhs (worth 2) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/3_variables/001.mhs (worth 3) :-  Stdout Check Passed!
Running test: main_tests/3_variables/002.mhs (worth 3) :-  Stdout Check Passed!
Running test: main_tests/3_variables/000.mhs (worth 3) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/003.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/004.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/005.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/002.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/008.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/006.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/007.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/2_application/001.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Prim Mul) (Num 2)) (Var "x")))

Stdout was:

Running test: main_tests/5_let/2_application/004.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Prim Add) (Var "x")) (Num 1)))

Stdout was:

Running test: main_tests/5_let/2_application/002.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "g'" Nothing ["x"] (App (App (Prim Mul) (Var "x")) (Var "x")))

Stdout was:

Running test: main_tests/5_let/2_application/000.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "isTrue" Nothing ["x"] (If (Var "x") (Con "True") (Con "False")))

Stdout was:

Running test: main_tests/5_let/4_partial_application/003.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "g" Nothing ["y"] (Var "x"))))

Stdout was:

Running test: main_tests/5_let/4_partial_application/005.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Mul) (Var "x")) (App (Prim Neg) (Var "y"))))))

Stdout was:

Running test: main_tests/5_let/4_partial_application/002.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Add) (Var "y")) (Var "y")))))

Stdout was:

Running test: main_tests/5_let/4_partial_application/008.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["w"] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Add) (App (App (Prim Add) (App (App (Prim Add) (Var "y")) (Var "x"))) (Var "w"))) (Num 1)))))

Stdout was:

Running test: main_tests/5_let/4_partial_application/000.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Add) (Var "x")) (Var "y")))))

Stdout was:

Running test: main_tests/5_let/0_simple/003.mhs (worth 7) :-  Stdout Check Failed:
 main :: Bool = let a :: Bool = True;
-               in let b :: Bool = False;
+               in let b ::  = False;
                   in if (<) 1 2
                         then a
                         else b;

Running test: main_tests/5_let/0_simple/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/0_simple/004.mhs (worth 7) :-  Stdout Check Failed:
 main :: Int = let a :: Int = 0;
-              in let b :: Int = 2;
-                 in let c :: Int = 3;
-                    in let d :: Int = 4;
-                       in let e :: Int = 5;
-                          in let f :: Int = 6;
-                             in let g :: Int = 7;
-                                in let h :: Int = 8;
-                                   in let i :: Int = 9;
-                                      in let j :: Int = 10;
-                                         in let k :: Int = 11;
-                                            in let l :: Int = 12;
-                                               in let m :: Int = 13;
-                                                  in let n :: Int = 14;
-                                                     in let o :: Int = 15;
-                                                        in let p :: Int = 16;
-                                                           in let q :: Int = 17;
-                                                              in let r :: Int = 18;
-                                                                 in let s :: Int = 19;
-                                                                    in let t :: Int = 20;
-                                                                       in let u :: Int = 21;
-                                                                          in let v :: Int = 22;
-                                                                             in let w :: Int = 23;
-                                                                                in let x :: Int = 24;
-                                                                                   in let y :: Int = 25;
-                                                                                      in let z :: Int = 26;
-                                                                                         in let za :: Int = 26;
-                                                                                            in let zb :: Int = 27;
-                                                                                               in let z1 :: Int = 1;
-                                                                                                  in let z2 :: Int = 2;
-                                                                                                     in let z3 :: Int = 3;
-                                                                                                        in let z4 :: Int = 4;
-                                                                                                           in let z5 :: Int = 5;
-                                                                                                              in let z6 :: Int = 6;
-                                                                                                                 in let z7 :: Int = 7;
-                                                                                                                    in let z8 :: Int = 8;
-                                                                                                                       in let z9 :: Int = 9;
-                                                                                                                          in let z10 :: Int = 10;
-                                                                                                                             in let z11 :: Int = 11;
-                                                                                                                                in let z12 :: Int = 12;
-                                                                                                                                   in let z13 :: Int = 13;
-                                                                                                                                      in let z14 :: Int = 14;
-                                                                                                                                         in let z15 :: Int = 15;
-                                                                                                                                            in let z16 :: Int = 16;
-                                                                                                                                               in let z17 :: Int = 17;
-                                                                                                                                                  in let z18 :: Int = 18;
-                                                                                                                                                     in let z19 :: Int = 19;
-                                                                                                                                                        in let z20 :: Int = 20;
-                                                                                                                                                           in let z21 :: Int = 21;
-                                                                                                                                                              in let z22 :: Int = 22;
-                                                                                                                                                                 in let z23 :: Int = 23;
-                                                                                                                                                                    in let z24 :: Int = 24;
-                                                                                                                                                                       in let z25 :: Int = 25;
-                                                                                                                                                                          in let z26 :: Int = 26;
-                                                                                                                                                                             in let z27 :: Int = 27;
-                                                                                                                                                                                in let z28 :: Int = 28;
-                                                                                                                                                                                   in let z29 :: Int = 29;
-                                                                                                                                                                                      in let z30 :: Int = 30;
-                                                                                                                                                                                         in let z31 :: Int = 31;
-                                                                                                                                                                                            in let z32 :: Int = 32;
-                                                                                                                                                                                               in let z33 :: Int = 33;
-                                                                                                                                                                                                  in let z34 :: Int = 34;
-                                                                                                                                                                                                     in let z35 :: Int = 35;
-                                                                                                                                                                                                        in let z36 :: Int = 36;
-                                                                                                                                                                                                           in let z37 :: Int = 37;
-                                                                                                                                                                                                              in let z38 :: Int = 38;
-                                                                                                                                                                                                                 in let z39 :: Int = 39;
-                                                                                                                                                                                                                    in let z40 :: Int = 40;
-                                                                                                                                                                                                                       in let z41 :: Int = 41;
-                                                                                                                                                                                                                          in let z42 :: Int = 42;
-                                                                                                                                                                                                                             in let z43 :: Int = 43;
-                                                                                                                                                                                                                                in let z44 :: Int = 44;
-                                                                                                                                                                                                                                   in let z45 :: Int = 45;
-                                                                                                                                                                                                                                      in let z46 :: Int = 46;
-                                                                                                                                                                                                                                         in let z47 :: Int = 47;
-                                                                                                                                                                                                                                            in let z48 :: Int = 48;
-                                                                                                                                                                                                                                               in let z49 :: Int = 49;
-                                                                                                                                                                                                                                                  in let z50 :: Int = 50;
-                                                                                                                                                                                                                                                     in let z51 :: Int = 51;
-                                                                                                                                                                                                                                                        in let z52 :: Int = 52;
-                                                                                                                                                                                                                                                           in let z53 :: Int = 53;
-                                                                                                                                                                                                                                                              in let z54 :: Int = 54;
-                                                                                                                                                                                                                                                                 in let z55 :: Int = 55;
-                                                                                                                                                                                                                                                                    in let z56 :: Int = 56;
-                                                                                                                                                                                                                                                                       in let z57 :: Int = 57;
-                                                                                                                                                                                                                                                                          in let z58 :: Int = 58;
-                                                                                                                                                                                                                                                                             in let z59 :: Int = 59;
-                                                                                                                                                                                                                                                                                in let z60 :: Int = 60;
-                                                                                                                                                                                                                                                                                   in let z61 :: Int = 61;
-                                                                                                                                                                                                                                                                                      in let z62 :: Int = 62;
-                                                                                                                                                                                                                                                                                         in let z63 :: Int = 63;
-                                                                                                                                                                                                                                                                                            in let z64 :: Int = 64;
-                                                                                                                                                                                                                                                                                               in let z65 :: Int = 65;
-                                                                                                                                                                                                                                                                                                  in let z66 :: Int = 66;
-                                                                                                                                                                                                                                                                                                     in let z67 :: Int = 67;
-                                                                                                                                                                                                                                                                                                        in let z68 :: Int = 68;
+              in let b ::  = 2;
+                 in let c ::  = 3;
+                    in let d ::  = 4;
+                       in let e ::  = 5;
+                          in let f ::  = 6;
+                             in let g ::  = 7;
+                                in let h ::  = 8;
+                                   in let i ::  = 9;
+                                      in let j ::  = 10;
+                                         in let k ::  = 11;
+                                            in let l ::  = 12;
+                                               in let m ::  = 13;
+                                                  in let n ::  = 14;
+                                                     in let o ::  = 15;
+                                                        in let p ::  = 16;
+                                                           in let q ::  = 17;
+                                                              in let r ::  = 18;
+                                                                 in let s ::  = 19;
+                                                                    in let t ::  = 20;
+                                                                       in let u ::  = 21;
+                                                                          in let v ::  = 22;
+                                                                             in let w ::  = 23;
+                                                                                in let x ::  = 24;
+                                                                                   in let y ::  = 25;
+                                                                                      in let z ::  = 26;
+                                                                                         in let za ::  = 26;
+                                                                                            in let zb ::  = 27;
+                                                                                               in let z1 ::  = 1;
+                                                                                                  in let z2 ::  = 2;
+                                                                                                     in let z3 ::  = 3;
+                                                                                                        in let z4 ::  = 4;
+                                                                                                           in let z5 ::  = 5;
+                                                                                                              in let z6 ::  = 6;
+                                                                                                                 in let z7 ::  = 7;
+                                                                                                                    in let z8 ::  = 8;
+                                                                                                                       in let z9 ::  = 9;
+                                                                                                                          in let z10 ::  = 10;
+                                                                                                                             in let z11 ::  = 11;
+                                                                                                                                in let z12 ::  = 12;
+                                                                                                                                   in let z13 ::  = 13;
+                                                                                                                                      in let z14 ::  = 14;
+                                                                                                                                         in let z15 ::  = 15;
+                                                                                                                                            in let z16 ::  = 16;
+                                                                                                                                               in let z17 ::  = 17;
+                                                                                                                                                  in let z18 ::  = 18;
+                                                                                                                                                     in let z19 ::  = 19;
+                                                                                                                                                        in let z20 ::  = 20;
+                                                                                                                                                           in let z21 ::  = 21;
+                                                                                                                                                              in let z22 ::  = 22;
+                                                                                                                                                                 in let z23 ::  = 23;
+                                                                                                                                                                    in let z24 ::  = 24;
+                                                                                                                                                                       in let z25 ::  = 25;
+                                                                                                                                                                          in let z26 ::  = 26;
+                                                                                                                                                                             in let z27 ::  = 27;
+                                                                                                                                                                                in let z28 ::  = 28;
+                                                                                                                                                                                   in let z29 ::  = 29;
+                                                                                                                                                                                      in let z30 ::  = 30;
+                                                                                                                                                                                         in let z31 ::  = 31;
+                                                                                                                                                                                            in let z32 ::  = 32;
+                                                                                                                                                                                               in let z33 ::  = 33;
+                                                                                                                                                                                                  in let z34 ::  = 34;
+                                                                                                                                                                                                     in let z35 ::  = 35;
+                                                                                                                                                                                                        in let z36 ::  = 36;
+                                                                                                                                                                                                           in let z37 ::  = 37;
+                                                                                                                                                                                                              in let z38 ::  = 38;
+                                                                                                                                                                                                                 in let z39 ::  = 39;
+                                                                                                                                                                                                                    in let z40 ::  = 40;
+                                                                                                                                                                                                                       in let z41 ::  = 41;
+                                                                                                                                                                                                                          in let z42 ::  = 42;
+                                                                                                                                                                                                                             in let z43 ::  = 43;
+                                                                                                                                                                                                                                in let z44 ::  = 44;
+                                                                                                                                                                                                                                   in let z45 ::  = 45;
+                                                                                                                                                                                                                                      in let z46 ::  = 46;
+                                                                                                                                                                                                                                         in let z47 ::  = 47;
+                                                                                                                                                                                                                                            in let z48 ::  = 48;
+                                                                                                                                                                                                                                               in let z49 ::  = 49;
+                                                                                                                                                                                                                                                  in let z50 ::  = 50;
+                                                                                                                                                                                                                                                     in let z51 ::  = 51;
+                                                                                                                                                                                                                                                        in let z52 ::  = 52;
+                                                                                                                                                                                                                                                           in let z53 ::  = 53;
+                                                                                                                                                                                                                                                              in let z54 ::  = 54;
+                                                                                                                                                                                                                                                                 in let z55 ::  = 55;
+                                                                                                                                                                                                                                                                    in let z56 ::  = 56;
+                                                                                                                                                                                                                                                                       in let z57 ::  = 57;
+                                                                                                                                                                                                                                                                          in let z58 ::  = 58;
+                                                                                                                                                                                                                                                                             in let z59 ::  = 59;
+                                                                                                                                                                                                                                                                                in let z60 ::  = 60;
+                                                                                                                                                                                                                                                                                   in let z61 ::  = 61;
+                                                                                                                                                                                                                                                                                      in let z62 ::  = 62;
+                                                                                                                                                                                                                                                                                         in let z63 ::  = 63;
+                                                                                                                                                                                                                                                                                            in let z64 ::  = 64;
+                                                                                                                                                                                                                                                                                               in let z65 ::  = 65;
+                                                                                                                                                                                                                                                                                                  in let z66 ::  = 66;
+                                                                                                                                                                                                                                                                                                     in let z67 ::  = 67;
+                                                                                                                                                                                                                                                                                                        in let z68 ::  = 68;
                                                                                                                                                                                                                                                                                                            in a;

Running test: main_tests/5_let/0_simple/005.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: implement unify! t1 is -->Arrow (Base Int) (Base Int)<---->Base Int

Stdout was:

Running test: main_tests/5_let/0_simple/002.mhs (worth 7) :-  Stdout Check Failed:
 main :: Int = let x :: Int = 1;
-              in let y :: Int = 2;
+              in let y ::  = 2;
                  in (+) x y;

Running test: main_tests/5_let/0_simple/006.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "g" Nothing ["x"] (Letfun (Bind "g'" Nothing ["y"] (App (App (Prim Add) (Var "x")) (Var "y")))))

Stdout was:

Running test: main_tests/5_let/0_simple/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/3_recursion/001.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "g" Nothing ["y"] (If (App (App (Prim Eq) (Var "x")) (Num 10)) (Var "y") (App (App (Var "f") (App (App (Prim Add) (Var "x")) (Num 1))) (App (App (Prim Add) (Var "y")) (Num 2)))))))

Stdout was:

Running test: main_tests/5_let/3_recursion/005.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (App (Prim Eq) (Var "x")) (Num 1000)) (Var "x") (App (Var "f") (App (App (Prim Add) (Var "x")) (Num 1)))))

Stdout was:

Running test: main_tests/5_let/3_recursion/fac.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "fac" Nothing ["n"] (If (App (App (Prim Eq) (Var "n")) (Num 0)) (Num 1) (App (App (Prim Mul) (Var "n")) (App (Var "fac") (App (App (Prim Sub) (Var "n")) (Num 1))))))

Stdout was:

Running test: main_tests/5_let/3_recursion/002.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "fib" Nothing ["n"] (If (App (App (Prim Eq) (Var "n")) (Num 0)) (Num 0) (If (App (App (Prim Eq) (Var "n")) (Num 1)) (Num 1) (App (App (Prim Add) (App (Var "fib") (App (App (Prim Sub) (Var "n")) (Num 2)))) (App (Var "fib") (App (App (Prim Sub) (Var "n")) (Num 1)))))))

Stdout was:

Running test: main_tests/5_let/3_recursion/000.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (App (Prim Eq) (Var "x")) (Num 100)) (Var "x") (App (Var "f") (App (App (Prim Add) (Var "x")) (Num 1)))))

Stdout was:

Running test: main_tests/5_let/1_functions/001.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "lt0" Nothing ["x"] (If (App (App (Prim Lt) (Var "x")) (Num 0)) (Con "True") (Con "False")))

Stdout was:

Running test: main_tests/5_let/1_functions/004.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (Prim Neg) (Num 1)))

Stdout was:

Running test: main_tests/5_let/1_functions/005.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "f" Nothing ["x"] (App (App (Prim Mul) (Num 2)) (Var "x")))))))))))

Stdout was:

Running test: main_tests/5_let/1_functions/002.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "square" Nothing ["x"] (App (App (Prim Mul) (Var "x")) (Var "x")))

Stdout was:

Running test: main_tests/5_let/1_functions/008.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (Con "True") (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (Var "x")))] (Var "h")) (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Add) (Var "x")) (Num 1))))] (Var "h"))))

Stdout was:

Running test: main_tests/5_let/1_functions/006.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Prim Add) (Var "x")) (Var "x")))

Stdout was:

Running test: main_tests/5_let/1_functions/007.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Prim Add) (Var "x")) (Var "x")))

Stdout was:

Running test: main_tests/5_let/1_functions/000.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Prim Add) (Var "x")) (Var "x")))

Stdout was:

Running test: main_tests/7_products/0_zero_tuple/0.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/7_products/0_zero_tuple/1.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/7_products/2_mixed_two_tuple/001.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/2_mixed_two_tuple/002.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/2_mixed_two_tuple/000.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/1_two_tuple/003.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/1_two_tuple/001.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/1_two_tuple/002.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/3_nested_products/003.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:156:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/001.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:156:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/004.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/3_nested_products/005.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:156:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/002.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:156:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/008.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/3_nested_products/006.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:156:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/007.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:156:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/000.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:152:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/6_programs/test.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (App (Prim Lt) (Num 0)) (Num 10)) (Con "True") (App (Var "f") (App (App (Prim Sub) (Var "x")) (Num 1)))))

Stdout was:

Passed 51 out of 122 tests: 41% Correct. Total of 240 marks.
