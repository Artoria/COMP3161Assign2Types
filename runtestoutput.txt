Running test: zz_more_tests/complex_exprs/010.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (App (Prim Eq) (Var "x")) (Num 0)) (Num 0) (App (Var "f") (App (App (Prim Sub) (Var "x")) (Num 1)))))

Stdout was:

Running test: zz_more_tests/complex_exprs/ifTest2.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: zz_more_tests/advanced_polymorphic/003.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (Con "True") (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (Var "x")))] (Var "h")) (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Add) (Var "x")) (Num 1))))] (Var "h"))))

Stdout was:

Running test: zz_more_tests/advanced_polymorphic/001.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (App (Prim Gt) (Var "x")) (Num 1)) (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (Var "x")))] (Var "h")) (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (Var "x")))] (Var "h"))))

Stdout was:

Running test: zz_more_tests/advanced_polymorphic/004.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Con "Pair") (Letfun (Bind "h" Nothing ["z"] (Var "x")))) (App (App (Prim Add) (Var "x")) (Num 1))))

Stdout was:

Running test: zz_more_tests/advanced_polymorphic/012.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Con "Pair") (Let [Bind "m" Nothing [] (Letfun (Bind "h" Nothing ["m"] (Let [Bind "z" Nothing [] (Var "x")] (Var "x"))))] (Var "m"))) (App (App (Prim Add) (Var "x")) (Num 1))))

Stdout was:

Running test: zz_more_tests/polymorphic/ifTest3.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: zz_more_tests/polymorphic/009.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Case (App (Prim Snd) (Var "x")) [Alt "Inl" ["y"] (App (Prim Fst) (Var "x")),Alt "Inr" ["z"] (Var "z")]))

Stdout was:

Running test: zz_more_tests/polymorphic/005.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Var "x"))

Stdout was:

Running test: zz_more_tests/polymorphic/011.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (Prim Fst) (Var "x")) (App (Prim Snd) (Var "x")) (App (Var "f") (App (App (Con "Pair") (Con "True")) (Num 10)))))

Stdout was:

Running test: zz_more_tests/polymorphic/008.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (Prim Fst) (Var "x")) (App (Prim Fst) (Var "x")) (App (Prim Snd) (Var "x"))))

Stdout was:

Running test: zz_more_tests/polymorphic/006.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Case (Var "x") [Alt "Inl" ["z"] (Var "z"),Alt "Inr" ["k"] (Var "k")]))

Stdout was:

Running test: zz_more_tests/basic_exprs/ifTest1.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/ConTest2.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:158:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: zz_more_tests/basic_exprs/ConTest3.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:158:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: zz_more_tests/basic_exprs/InlTest1.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: zz_more_tests/basic_exprs/PrimOpTest.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/ConTest1.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/intTest.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/9_examples/4.mhs (worth 8) :-  Stdout Check Passed!
Running test: main_tests/9_examples/5.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["z"] (Var "z"))

Stdout was:

Running test: main_tests/9_examples/0.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/9_examples/1.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/9_examples/3.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Case (App (Con "Inl") (Num 1)) [Alt "Inl" ["x"] (App (App (Prim Add) (Var "x")) (Num 1)),Alt "Inr" ["y"] (Var "y")]

Stdout was:

Running test: main_tests/9_examples/2.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/9_examples/6.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Var "x"))

Stdout was:

Running test: main_tests/4_ifthenelse/003.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/001.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/004.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/005.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/002.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/006.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/007.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/000.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/0_basics/main/main.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/ints/003.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/ints/001.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/ints/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/bools/001.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/bools/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/003.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/004.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/009.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/005.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/002.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/010.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/011.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/014.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/008.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/006.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/007.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/dividebyzero/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/1_primops/unarynegate/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/8_sums/2_case/002.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Case (App (Con "Inl") (App (App (Con "Pair") (Con "True")) (Num 7))) [Alt "Inl" ["x"] (App (Con "Inr") (Var "x")),Alt "Inr" ["y"] (App (Con "Inl") (Var "y"))]

Stdout was:

Running test: main_tests/8_sums/2_case/000.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Case (App (Con "Inl") (App (App (Con "Pair") (Num 1)) (Con "True"))) [Alt "Inl" ["x"] (Var "x"),Alt "Inr" ["y"] (Var "y")]

Stdout was:

Running test: main_tests/8_sums/0_left/0.mhs (worth 2) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/8_sums/0_left/1.mhs (worth 2) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/8_sums/1_right/003.mhs (worth 2) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/8_sums/1_right/001.mhs (worth 2) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/8_sums/1_right/002.mhs (worth 2) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/3_variables/001.mhs (worth 3) :-  Stdout Check Passed!
Running test: main_tests/3_variables/002.mhs (worth 3) :-  Stdout Check Passed!
Running test: main_tests/3_variables/000.mhs (worth 3) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/003.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/004.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/005.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/002.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/008.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/006.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/007.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/2_application/001.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Prim Mul) (Num 2)) (Var "x")))

Stdout was:

Running test: main_tests/5_let/2_application/004.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Prim Add) (Var "x")) (Num 1)))

Stdout was:

Running test: main_tests/5_let/2_application/002.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "g'" Nothing ["x"] (App (App (Prim Mul) (Var "x")) (Var "x")))

Stdout was:

Running test: main_tests/5_let/2_application/000.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "isTrue" Nothing ["x"] (If (Var "x") (Con "True") (Con "False")))

Stdout was:

Running test: main_tests/5_let/4_partial_application/003.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "g" Nothing ["y"] (Var "x"))))

Stdout was:

Running test: main_tests/5_let/4_partial_application/005.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Mul) (Var "x")) (App (Prim Neg) (Var "y"))))))

Stdout was:

Running test: main_tests/5_let/4_partial_application/002.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Add) (Var "y")) (Var "y")))))

Stdout was:

Running test: main_tests/5_let/4_partial_application/008.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["w"] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Add) (App (App (Prim Add) (App (App (Prim Add) (Var "y")) (Var "x"))) (Var "w"))) (Num 1)))))

Stdout was:

Running test: main_tests/5_let/4_partial_application/000.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Add) (Var "x")) (Var "y")))))

Stdout was:

Running test: main_tests/5_let/0_simple/003.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/0_simple/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/0_simple/004.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/0_simple/005.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: implement unify! t1 is -->Base Int<---->Arrow (TypeVar "b") (TypeVar "b")

Stdout was:

Running test: main_tests/5_let/0_simple/002.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/0_simple/006.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "g" Nothing ["x"] (Letfun (Bind "g'" Nothing ["y"] (App (App (Prim Add) (Var "x")) (Var "y")))))

Stdout was:

Running test: main_tests/5_let/0_simple/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/3_recursion/001.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "g" Nothing ["y"] (If (App (App (Prim Eq) (Var "x")) (Num 10)) (Var "y") (App (App (Var "f") (App (App (Prim Add) (Var "x")) (Num 1))) (App (App (Prim Add) (Var "y")) (Num 2)))))))

Stdout was:

Running test: main_tests/5_let/3_recursion/005.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (App (Prim Eq) (Var "x")) (Num 1000)) (Var "x") (App (Var "f") (App (App (Prim Add) (Var "x")) (Num 1)))))

Stdout was:

Running test: main_tests/5_let/3_recursion/fac.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "fac" Nothing ["n"] (If (App (App (Prim Eq) (Var "n")) (Num 0)) (Num 1) (App (App (Prim Mul) (Var "n")) (App (Var "fac") (App (App (Prim Sub) (Var "n")) (Num 1))))))

Stdout was:

Running test: main_tests/5_let/3_recursion/002.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "fib" Nothing ["n"] (If (App (App (Prim Eq) (Var "n")) (Num 0)) (Num 0) (If (App (App (Prim Eq) (Var "n")) (Num 1)) (Num 1) (App (App (Prim Add) (App (Var "fib") (App (App (Prim Sub) (Var "n")) (Num 2)))) (App (Var "fib") (App (App (Prim Sub) (Var "n")) (Num 1)))))))

Stdout was:

Running test: main_tests/5_let/3_recursion/000.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (App (Prim Eq) (Var "x")) (Num 100)) (Var "x") (App (Var "f") (App (App (Prim Add) (Var "x")) (Num 1)))))

Stdout was:

Running test: main_tests/5_let/1_functions/001.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "lt0" Nothing ["x"] (If (App (App (Prim Lt) (Var "x")) (Num 0)) (Con "True") (Con "False")))

Stdout was:

Running test: main_tests/5_let/1_functions/004.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (Prim Neg) (Num 1)))

Stdout was:

Running test: main_tests/5_let/1_functions/005.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "f" Nothing ["x"] (Letfun (Bind "f" Nothing ["x"] (App (App (Prim Mul) (Num 2)) (Var "x")))))))))))

Stdout was:

Running test: main_tests/5_let/1_functions/002.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "square" Nothing ["x"] (App (App (Prim Mul) (Var "x")) (Var "x")))

Stdout was:

Running test: main_tests/5_let/1_functions/008.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (Con "True") (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (Var "x")))] (Var "h")) (Let [Bind "h" Nothing [] (Letfun (Bind "g" Nothing ["y"] (App (App (Prim Add) (Var "x")) (Num 1))))] (Var "h"))))

Stdout was:

Running test: main_tests/5_let/1_functions/006.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Prim Add) (Var "x")) (Var "x")))

Stdout was:

Running test: main_tests/5_let/1_functions/007.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Prim Add) (Var "x")) (Var "x")))

Stdout was:

Running test: main_tests/5_let/1_functions/000.mhs (worth 7) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (App (App (Prim Add) (Var "x")) (Var "x")))

Stdout was:

Running test: main_tests/7_products/0_zero_tuple/0.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/7_products/0_zero_tuple/1.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/7_products/2_mixed_two_tuple/001.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/2_mixed_two_tuple/002.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/2_mixed_two_tuple/000.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/1_two_tuple/003.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/1_two_tuple/001.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/1_two_tuple/002.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/3_nested_products/003.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:158:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/001.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:158:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/004.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/3_nested_products/005.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:158:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/002.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:158:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/008.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/7_products/3_nested_products/006.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:158:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/007.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:158:21-40: Irrefutable pattern failed for pattern MinHS.Syntax.Ty t1


Stdout was:

Running test: main_tests/7_products/3_nested_products/000.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: MinHS/TyInfer.hs:154:21-46: Irrefutable pattern failed for pattern Data.Maybe.Just (MinHS.Syntax.Ty t1)


Stdout was:

Running test: main_tests/6_programs/test.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Letfun (Bind "f" Nothing ["x"] (If (App (App (Prim Lt) (Num 0)) (Num 10)) (Con "True") (App (Var "f") (App (App (Prim Sub) (Var "x")) (Num 1)))))

Stdout was:

Passed 54 out of 122 tests: 44% Correct. Total of 261 marks.
