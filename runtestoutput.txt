Running test: zz_more_tests/complex_exprs/010.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/complex_exprs/ifTest2.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/advanced_polymorphic/003.mhs (worth 1) :-  Stdout Check Failed:
-main :: forall k. (Int -> k -> Int) = let g :: forall j. (Int -> j -> Int) = (letfun f :: (Int -> j -> Int) x = if True
-                                                                                                                   then let h :: forall c. (c -> Int) = (letfun g :: (c -> Int) y = x);
-                                                                                                                        in h
-                                                                                                                   else let h :: forall f. (f -> Int) = (letfun g :: (f -> Int) y = (+) x 1);
-                                                                                                                        in h);
-                                      in g;
+main :: (Int -> e -> Int) = let g :: (Int -> e -> Int) = (letfun f :: (Int -> e -> Int) x = if True
+                                                                                               then let h :: (c -> a) = (letfun g :: (c -> a) y = x);
+                                                                                                    in h
+                                                                                               else let h :: (e -> Int) = (letfun g :: (e -> Int) y = (+) x 1);
+                                                                                                    in h);
+                            in g;

Running test: zz_more_tests/advanced_polymorphic/001.mhs (worth 1) :-  Stdout Check Failed:
-main :: forall k. (Int -> k -> Int) = let g :: forall j. (Int -> j -> Int) = (letfun f :: (Int -> j -> Int) x = if (>) x 1
-                                                                                                                   then let h :: forall e. (e -> Int) = (letfun g :: (e -> Int) y = x);
-                                                                                                                        in h
-                                                                                                                   else let h :: forall h. (h -> Int) = (letfun g :: (h -> Int) y = x);
-                                                                                                                        in h);
-                                      in g;
+main :: (Int -> h -> a) = let g :: (Int -> h -> a) = (letfun f :: (Int -> h -> a) x = if (>) x 1
+                                                                                         then let h :: (f -> a) = (letfun g :: (f -> a) y = x);
+                                                                                              in h
+                                                                                         else let h :: (h -> a) = (letfun g :: (h -> a) y = x);
+                                                                                              in h);
+                          in g;

Running test: zz_more_tests/advanced_polymorphic/004.mhs (worth 1) :-  Stdout Check Failed:
-main :: forall k. (Int -> (k -> Int) * Int) = let g :: forall e. (Int -> (e -> Int) * Int) = (letfun f :: (Int -> (e -> Int) * Int) x = ((letfun h :: (e -> Int) z = x), (+) x 1));
-                                              in g;
+main :: (Int -> (e -> Int) * Int) = let g :: (Int -> (e -> Int) * Int) = (letfun f :: (Int -> (e -> Int) * Int) x = ((letfun h :: (e -> a) z = x), (+) x 1));
+                                    in g;

Running test: zz_more_tests/advanced_polymorphic/012.mhs (worth 1) :-  Stdout Check Failed:
-main :: forall g. (Int -> (g -> Int) * Int) = (letfun f :: (Int -> (g -> Int) * Int) x = (let m :: forall e. (e -> Int) = (letfun h :: (e -> Int) m = let z :: Int = x;
-                                                                                                                                                      in x);
-                                                                                          in m, (+) x 1));
+main :: (Int -> (e -> Int) * Int) = (letfun f :: (Int -> (e -> Int) * Int) x = (let m :: (e -> a) = (letfun h :: (e -> a) m = let z :: a = x;
+                                                                                                                              in x);
+                                                                                in m, (+) x 1));

Running test: zz_more_tests/polymorphic/ifTest3.mhs (worth 1) :-  Stdout Check Failed:
-main :: forall e. (Int + e) = if True
-                                 then Inl 1
-                                 else Inl 5;
+main :: (Int + e) = if True
+                       then Inl 1
+                       else Inl 5;

Running test: zz_more_tests/polymorphic/009.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [("f",Ty (TypeVar "b")),("x",Ty (TypeVar "a"))])<--- exp is --->Case (App (Prim Snd) (Var "x")) [Alt "Inl" ["y"] (App (Prim Fst) (Var "x")),Alt "Inr" ["z"] (Var "z")]

Stdout was:

Running test: zz_more_tests/polymorphic/005.mhs (worth 1) :-  Stdout Check Failed:
-main :: forall f. (f -> f) = if True
-                                then let g :: forall a. (a -> a) = (letfun f :: (a -> a) x = x);
-                                     in g
-                                else let g :: forall d. (d -> d) = (letfun f :: (d -> d) x = x);
-                                     in g;
+main :: (c -> c) = if True
+                      then let g :: (a -> a) = (letfun f :: (a -> a) x = x);
+                           in g
+                      else let g :: (c -> c) = (letfun f :: (c -> c) x = x);
+                           in g;

Running test: zz_more_tests/polymorphic/011.mhs (worth 1) :-  Stdout Check Failed:
-main :: ((Bool * Int) -> Int) = (letfun f :: ((Bool * Int) -> Int) x = if fst x
-                                                                          then snd x
-                                                                          else f ((True, 10)));
+Variable a cannot occur in the type (a * d) (occurs check)

Running test: zz_more_tests/polymorphic/008.mhs (worth 1) :-  Stdout Check Failed:
-main :: ((Bool * Bool) -> Bool) = (letfun f :: ((Bool * Bool) -> Bool) x = if fst x
-                                                                              then fst x
-                                                                              else snd x);
+Variable a cannot occur in the type (a * d) (occurs check)

Running test: zz_more_tests/polymorphic/006.mhs (worth 1) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [("f",Ty (TypeVar "b")),("x",Ty (TypeVar "a"))])<--- exp is --->Case (Var "x") [Alt "Inl" ["z"] (Var "z"),Alt "Inr" ["k"] (Var "k")]

Stdout was:

Running test: zz_more_tests/basic_exprs/ifTest1.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/ConTest2.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/ConTest3.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/InlTest1.mhs (worth 1) :-  Stdout Check Failed:
-main :: forall b. (Int + b) = Inl 10;
+main :: (Int + b) = Inl 10;

Running test: zz_more_tests/basic_exprs/PrimOpTest.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/ConTest1.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/intTest.mhs (worth 1) :-  Stdout Check Passed!
Running test: zz_more_tests/basic_exprs/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/9_examples/4.mhs (worth 8) :-  Stdout Check Passed!
Running test: main_tests/9_examples/5.mhs (worth 8) :-  Stdout Check Failed:
 main :: (Int + Int) = let x :: Int = 1;
                       in let y :: Int = 2;
-                         in let f :: forall a. (a -> a) = (letfun f :: (a -> a) z = z);
+                         in let f :: (a -> a) = (letfun f :: (a -> a) z = z);
                             in if f True
                                   then Inl ((+) x y)
                                   else Inr x;

Running test: main_tests/9_examples/0.mhs (worth 8) :-  Stdout Check Failed:
-main :: forall g. (Int * (Bool + g) * Bool) = (1, (Inl True, False));
+main :: (Int * (Bool + g) * Bool) = (1, (Inl True, False));

Running test: main_tests/9_examples/1.mhs (worth 8) :-  Stdout Check Failed:
-main :: forall d. forall b. ((Bool + d) + b) = Inl (Inl True);
+main :: ((Bool + d) + b) = Inl (Inl True);

Running test: main_tests/9_examples/3.mhs (worth 8) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Case (App (Con "Inl") (Num 1)) [Alt "Inl" ["x"] (App (App (Prim Add) (Var "x")) (Num 1)),Alt "Inr" ["y"] (Var "y")]

Stdout was:

Running test: main_tests/9_examples/2.mhs (worth 8) :-  Stdout Check Passed!
Running test: main_tests/9_examples/6.mhs (worth 8) :-  Stdout Check Failed:
-main :: Int = (letfun f :: (Int -> Int) x = x) 1;
+main :: Int = (letfun f :: (a -> a) x = x) 1;

Running test: main_tests/4_ifthenelse/003.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/001.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/004.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/005.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/002.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/006.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/007.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/4_ifthenelse/000.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/0_basics/main/main.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/ints/003.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/ints/001.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/ints/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/bools/001.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/0_basics/bools/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/003.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/004.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/009.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/005.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/002.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/010.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/011.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/014.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/008.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/006.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/007.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/primops/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/1_primops/dividebyzero/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/1_primops/unarynegate/000.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/8_sums/2_case/002.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Case (App (Con "Inl") (App (App (Con "Pair") (Con "True")) (Num 7))) [Alt "Inl" ["x"] (App (Con "Inr") (Var "x")),Alt "Inr" ["y"] (App (Con "Inl") (Var "y"))]

Stdout was:

Running test: main_tests/8_sums/2_case/000.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: Implement inferExp! Gamma is -->Env (fromList [])<--- exp is --->Case (App (Con "Inl") (App (App (Con "Pair") (Num 1)) (Con "True"))) [Alt "Inl" ["x"] (Var "x"),Alt "Inr" ["y"] (Var "y")]

Stdout was:

Running test: main_tests/8_sums/0_left/0.mhs (worth 2) :-  Stdout Check Failed:
-main :: forall b. (Int + b) = Inl 1;
+main :: (Int + b) = Inl 1;

Running test: main_tests/8_sums/0_left/1.mhs (worth 2) :-  Stdout Check Failed:
-main :: forall g. forall b. ((() * Int + g) + b) = Inl (((), Inl 3));
+main :: ((() * Int + g) + b) = Inl (((), Inl 3));

Running test: main_tests/8_sums/1_right/003.mhs (worth 2) :-  Stdout Check Failed:
-main :: forall d. (() * d + ()) = ((), Inr ());
+main :: (() * d + ()) = ((), Inr ());

Running test: main_tests/8_sums/1_right/001.mhs (worth 2) :-  Stdout Check Failed:
-main :: forall a. (a + Bool * Bool) = Inr ((True, False));
+main :: (a + Bool * Bool) = Inr ((True, False));

Running test: main_tests/8_sums/1_right/002.mhs (worth 2) :-  Stdout Check Failed:
-main :: forall a. forall e. forall i. (a + (e + Int) * i + ()) = Inr ((Inr 1, Inr ()));
+main :: (a + (e + Int) * i + ()) = Inr ((Inr 1, Inr ()));

Running test: main_tests/3_variables/001.mhs (worth 3) :-  Stdout Check Passed!
Running test: main_tests/3_variables/002.mhs (worth 3) :-  Stdout Check Passed!
Running test: main_tests/3_variables/000.mhs (worth 3) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/003.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/004.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/005.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/002.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/008.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/006.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/007.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/2_nestedexpr/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/2_application/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/2_application/004.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/2_application/002.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/2_application/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/4_partial_application/003.mhs (worth 7) :-  Stdout Check Failed:
-main :: Int = let f :: forall a. forall c. (a -> c -> a) = (letfun f :: (a -> c -> a) x = (letfun g :: (c -> a) y = x));
-              in let g :: forall f. (f -> Int) = f 10;
+main :: Int = let f :: (a -> c -> a) = (letfun f :: (a -> c -> a) x = (letfun g :: (c -> a) y = x));
+              in let g :: (c -> Int) = f 10;
                  in g 3;

Running test: main_tests/5_let/4_partial_application/005.mhs (worth 7) :-  Stdout Check Failed:
 main :: Int = let f :: (Int -> Int -> Int) = (letfun f :: (Int -> Int -> Int) x = (letfun g :: (Int -> Int) y = (*) x ((- y))));
-              in let z :: forall h. (h -> Int -> Int) = (letfun z :: (h -> Int -> Int) x = f 3);
+              in let z :: (j -> Int -> Int) = (letfun z :: (j -> Int -> Int) x = f 3);
                  in z 2 4;

Running test: main_tests/5_let/4_partial_application/002.mhs (worth 7) :-  Stdout Check Failed:
-main :: Int = let f :: forall a. (a -> Int -> Int) = (letfun f :: (a -> Int -> Int) x = (letfun g :: (Int -> Int) y = (+) y y));
+main :: Int = let f :: (a -> Int -> Int) = (letfun f :: (a -> Int -> Int) x = (letfun g :: (Int -> Int) y = (+) y y));
               in f 2 3;

Running test: main_tests/5_let/4_partial_application/008.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/4_partial_application/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/0_simple/003.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/0_simple/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/0_simple/004.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/0_simple/005.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/0_simple/002.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/0_simple/006.mhs (worth 7) :-  Stdout Check Failed:
 main :: Int = let plus :: (Int -> Int -> Int) = (letfun g :: (Int -> Int -> Int) x = (letfun g' :: (Int -> Int) y = (+) x y));
               in let inc :: (Int -> Int) = (letfun g :: (Int -> Int) x = (+) x 1);
                  in let f :: (Int -> Int) = (letfun f :: (Int -> Int) x = if (==) x 10
                                                                              then 10
-                                                                             else let y :: Int = f ((+) x 1);
+                                                                             else let y :: u = f ((+) x 1);
                                                                                   in plus let z :: Int = 4;
                                                                                           in inc z y);
                     in f ((- 1003));

Running test: main_tests/5_let/0_simple/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/3_recursion/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/3_recursion/005.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/3_recursion/fac.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/3_recursion/002.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/3_recursion/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/1_functions/001.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/1_functions/004.mhs (worth 7) :-  Stdout Check Failed:
-main :: Bool = let f :: forall a. (a -> Int) = (letfun f :: (a -> Int) x = (- 1));
-               in let f :: forall d. (d -> Int) = (letfun f :: (d -> Int) x = (- 2));
-                  in let f :: forall g. (g -> Int) = (letfun f :: (g -> Int) x = (- 3));
-                     in let f :: forall j. (j -> Int) = (letfun f :: (j -> Int) x = (- 4));
-                        in let f :: forall m. (m -> Int) = (letfun f :: (m -> Int) x = (- 5));
-                           in let f :: forall p. (p -> Int) = (letfun f :: (p -> Int) x = (- 6));
-                              in let f :: forall s. (s -> Int) = (letfun f :: (s -> Int) x = (- 7));
-                                 in let f :: forall v. (v -> Int) = (letfun f :: (v -> Int) x = (- 8));
-                                    in let f :: forall y. (y -> Int) = (letfun f :: (y -> Int) x = (- 9));
-                                       in let f :: forall a2. (a2 -> Bool) = (letfun f :: (a2 -> Bool) x = True);
+main :: Bool = let f :: (a -> Int) = (letfun f :: (a -> Int) x = (- 1));
+               in let f :: (e -> Int) = (letfun f :: (e -> Int) x = (- 2));
+                  in let f :: (i -> Int) = (letfun f :: (i -> Int) x = (- 3));
+                     in let f :: (m -> Int) = (letfun f :: (m -> Int) x = (- 4));
+                        in let f :: (q -> Int) = (letfun f :: (q -> Int) x = (- 5));
+                           in let f :: (u -> Int) = (letfun f :: (u -> Int) x = (- 6));
+                              in let f :: (y -> Int) = (letfun f :: (y -> Int) x = (- 7));
+                                 in let f :: (a3 -> Int) = (letfun f :: (a3 -> Int) x = (- 8));
+                                    in let f :: (a7 -> Int) = (letfun f :: (a7 -> Int) x = (- 9));
+                                       in let f :: (a11 -> Bool) = (letfun f :: (a11 -> Bool) x = True);
                                           in f 7;

Running test: main_tests/5_let/1_functions/005.mhs (worth 7) :-  Stdout Check Failed:
-main :: Int = let f :: forall a. forall c. forall e. forall g. (a -> c -> e -> g -> Int -> Int) = (letfun f :: (a -> c -> e -> g -> Int -> Int) x = (letfun f :: (c -> e -> g -> Int -> Int) x = (letfun f :: (e -> g -> Int -> Int) x = (letfun f :: (g -> Int -> Int) x = (letfun f :: (Int -> Int) x = (*) 2 x)))));
+main :: Int = let f :: (a -> c -> e -> g -> Int -> Int) = (letfun f :: (a -> c -> e -> g -> Int -> Int) x = (letfun f :: (c -> e -> g -> Int -> Int) x = (letfun f :: (e -> g -> Int -> Int) x = (letfun f :: (g -> Int -> Int) x = (letfun f :: (Int -> Int) x = (*) 2 x)))));
               in f 0 0 0 0 7;

Running test: main_tests/5_let/1_functions/002.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/1_functions/008.mhs (worth 7) :-  Stdout Check Failed:
-main :: forall k. (Int -> k -> Int) = let g :: forall j. (Int -> j -> Int) = (letfun f :: (Int -> j -> Int) x = if True
-                                                                                                                   then let h :: forall c. (c -> Int) = (letfun g :: (c -> Int) y = x);
-                                                                                                                        in h
-                                                                                                                   else let h :: forall f. (f -> Int) = (letfun g :: (f -> Int) y = (+) x 1);
-                                                                                                                        in h);
-                                      in g;
+main :: (Int -> e -> Int) = let g :: (Int -> e -> Int) = (letfun f :: (Int -> e -> Int) x = if True
+                                                                                               then let h :: (c -> a) = (letfun g :: (c -> a) y = x);
+                                                                                                    in h
+                                                                                               else let h :: (e -> Int) = (letfun g :: (e -> Int) y = (+) x 1);
+                                                                                                    in h);
+                            in g;

Running test: main_tests/5_let/1_functions/006.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/1_functions/007.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/5_let/1_functions/000.mhs (worth 7) :-  Stdout Check Passed!
Running test: main_tests/7_products/0_zero_tuple/0.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/7_products/0_zero_tuple/1.mhs (worth 1) :-  Stdout Check Passed!
Running test: main_tests/7_products/2_mixed_two_tuple/001.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/2_mixed_two_tuple/002.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/2_mixed_two_tuple/000.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/1_two_tuple/003.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/1_two_tuple/001.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/1_two_tuple/002.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/3_nested_products/003.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/3_nested_products/001.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/3_nested_products/004.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/3_nested_products/005.mhs (worth 5) :-  Stdout Check Failed:
-main :: Int = fst ((1, fst ((True, False))));
+Type mismatch:
+   Bool
+is not
+   Int

Running test: main_tests/7_products/3_nested_products/002.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/3_nested_products/008.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/3_nested_products/006.mhs (worth 5) :-  Executable returned non-zero exit code(1).
Stderr was:
minhs-2: implement unify! t1 is -->Prod (Base Int) (Base Bool)<---->Base Unit

Stdout was:

Running test: main_tests/7_products/3_nested_products/007.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/7_products/3_nested_products/000.mhs (worth 5) :-  Stdout Check Passed!
Running test: main_tests/6_programs/test.mhs (worth 5) :-  Stdout Check Passed!
Passed 90 out of 122 tests: 73% Correct. Total of 462 marks.
